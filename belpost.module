<?php

/**
 * @file
 * Keeps a list of Belgian Postal codes to use as a field.
 */

/**
 * Implements hook_entity_info().
 */
function belpost_entity_info() {
  $info = array();
  $info['BelPost'] = array(
    'label' => t('Belgian Postal code'),
    'base table' => 'belpost',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'city',
    ),
    'uri callback' => 'entity_class_uri',
    'entity class' => 'BelPostEntity',
    'controller class' => 'BelPostEntityAPIController',
    'admin ui' => array(
      'path' => 'admin/belpost',
      'menu wildcard' => '%belpost',
      'file' => 'belpost.admin.inc',
    ),
    'module' => 'belpost',
    'access callback' => 'belpost_access',
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
      'field' => array(
        'label' => t('Field'),
        'custom settings' => FALSE,
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_menu().
 */
function belpost_menu() {
  $items = array();
  $items['belpost/%belpost'] = array(
    'title' => 'code',
    'page callback' => 'belpost_view_code',
    'page arguments' => array(1),
    'access arguments' => array('view belpost'),
  );
  /*$items['belpost/autocomplete'] = array(
    'title' => 'belpost autocomplete',
    'page callback' => 'belpost_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('view belpost'),
    'type' => MENU_CALLBACK,
  );*/
  return $items;
}

/**
 * Checks whether the user has access to the required operation.
 * 
 * @param string $op
 *   An operation
 * @param object $entity
 *   The entity the operation must be performed on
 * @param object $account
 *   The account that tries to perform the operation
 * 
 * @return bool
 *   TRUE when operation is allowed, FALSE if otherwise
 */
function belpost_access($op, $entity = NULL, $account = NULL) {
  if (user_access('administer belpost', $account)) {
    return TRUE;
  }
  if ($op == 'view' && user_access('view belpost', $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function belpost_permission() {
  return array(
    'view belpost' => array(
      'title' => t('View Belgian Postal Codes'),
      'description' => t('User can view Belgian Postal Codes'),
    ),
    'administer belpost' => array(
      'title' => t('Administer Belgian Postal Codes'),
      'description' => t('User can view,add, update and delete Belgian Postal Codes'),
    ),
  );
}

/**
 * Returns a belpost entity.
 * 
 * @param int $id 
 *   id of the entity
 * 
 * @return object 
 *   a belpost entity or null if entity not found
 */
function belpost_load($id) {
  $entities = entity_load('BelPost', array($id));
  return array_pop($entities);
}

/**
 * Returns a render array with postal code info.
 * 
 * @param object $postalcode 
 *   a BelPost entity
 * 
 * @return array 
 *   a render array
 */
function belpost_view_code($postalcode) {
  drupal_set_title($postalcode->city);
  $render = entity_view('BelPost', array($postalcode->id => $postalcode));
  return $render;
}

class BelPostEntity extends Entity {
  /**
   * Returns the default uri for this Postal code.
   * 
   * @return array
   *   The uri info
   */
  public function defaultUri() {
    return array('path' => 'belpost/' . $this->identifier());
  }
}

class BelPostEntityAPIController extends EntityAPIController {
  /**
   * Returns a render array for a Belpost entity.
   * 
   * @param object $entity 
   *   A Belpost entity
   * @param string $view_mode 
   *   The viewmode
   * @param string $langcode 
   *   The language code
   * @param array $content 
   *   Allows prepopulating the build content
   * 
   * @return array
   *   The render array
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    $build['postalcode'] = array(
      '#type' => 'markup',
      '#prefix' => '<div>',
      '#markup' => $entity->code . ' ' . $entity->city,
      '#suffix' => '</div>',
    );
    return $build;
  }
}


/**
 * Implements hook_field_info().
 */
function belpost_field_info() {
  return array(
    'belpost_ref' => array(
      'label' => t('Belgian Postal Code'),
      'description' => t('A reference to a Belgian Postal Code'),
      'default_formatter' => 'belpost_ref_format',
      'default_widget' => 'belpost_ref_widget',
    ),
  );
}
/**
 * Implements hook_field_is_empty().
 */
function belpost_field_is_empty($item, $field) {
  return empty($item['ref_belpost_id']);
}

/**
 * Implements hook_field_formatter_info().
 */
function belpost_field_formatter_info() {
  return array(
    'belpost_ref_format' => array(
      'label' => t('Belgian Postal Code'),
      'field types' => array('belpost_ref'),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function belpost_field_widget_info() {
  return array(
    'belpost_ref_widget' => array(
      'label' => t('Belgian Postal Code'),
      'field types' => array('belpost_ref'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function belpost_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'belpost_ref_format':
      foreach ($items as $delta => $item) {
        $postalcode = belpost_load($item['ref_belpost_id']);
        $element[$delta] = entity_view('BelPost', array($postalcode->id => $postalcode), 'field');
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_form().
 */
function belpost_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'belpost_ref_widget':
      $value = empty($items[$delta]['ref_belpost_id']) ? '' : $items[$delta]['ref_belpost_id'];
      if (!empty($value) && is_numeric($value)) {
        $postalcode = entity_load_single('BelPost', $value);
        $value = $postalcode->code . ' ' . $postalcode->city;
      }
      $element['ref_belpost_id'] = array(
        '#title' => check_plain($element['#title']),
        '#type' => 'textfield',
        '#default_value' => $value,
        '#description' => check_plain($element['#description']),
        '#required' => $element['#required'],
        '#value_callback' => 'belpost_field_value_callback',
        '#element_validate' => array('belpost_element_field_validate'),
 //       '#autocomplete_path' => 'belpost/autocomplete',
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_theme_registry_alter().
 * 
 * Adds module path to the theme registry so belpost.tpl.php gets picked up.
 * See http://www.metachunk.com/blog/adding-module-path-drupal-7-theme-registry.
 */
function belpost_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'belpost');
  // Munge on a copy.
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
}

/**
 * Value callback for the BelPost textfield.
 * 
 * Converts a 'code city' string into the corresponding belpost id.
 * If more than 1 belpost entry is found or none is found, the function
 * returns the original input.
 * 
 * @param array $element
 *   The Form element
 * @param string $input
 *   The user input (code city)
 * 
 * @return int
 *   the id of the belpost entry (or the original input if not found)
 */
function belpost_field_value_callback($element, $input = FALSE) {
  if ($input === FALSE) {
    return NULL;
  }
  if (empty($input)) {
    return $input;
  }
  list($code, $city) = explode(' ', $input);
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'BelPost')
          ->propertyCondition('code', $code)
          ->propertyCondition('city', $city)
          ->execute();
  if (isset($result['BelPost']) && count($result['BelPost']) == 1) {
    $belpost_nids = array_keys($result['BelPost']);
    if (count($belpost_nids) == 1) {
      return array_pop($belpost_nids);
    }
  }
  // Invalid combination of code and city.
  return $input;
}

/**
 * Validates the input of the BelPost field.
 * 
 * @param array $element
 *   The form-element
 * @param array $form_state
 *   The form state
 * @param array $form
 *   The form
 */
function belpost_element_field_validate($element, $form_state, $form) {
  if (!empty($element['#value'])) {
    // If the value-callback function has not found 'code city'
    // the original input will be returned (i.e. a string).
    if (!is_numeric($element['#value'])) {
      form_error($element, t('Wrong postalcode'));
    }
  }
}
/*function belpost_autocomplete($code) {
  $result = new EntityFieldQuery();
  $result = $result->propertyCondition('code', $code . '%', 'LIKE')
          ->execute();
  drupal_json_output($var);
}*/